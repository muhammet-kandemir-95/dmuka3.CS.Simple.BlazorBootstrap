@using System.Collections.Concurrent;
@using System.Reflection;

@implements IDisposable
@inject IJSRuntime JSRuntime

<div class="row mb-sm-2 mb-2">
    <div class="col-md-6 pl-4 text-left">
        <label>
            @this.Model.RowCountLabel
        </label>
        <select class="browser-default custom-select" style="width:auto;" @onchange="(async e =>
                                                                                     {
                                                                                         this.Model.PageIndex = 0;
                                                                                         this.Model.RowCount = Convert.ToInt32(e.Value);
                                                                                         await this.RefreshAsync();
                                                                                     })">
            <option value="10">10</option>
            <option value="20">20</option>
            <option value="50">50</option>
            <option value="100">100</option>
        </select>
    </div>
    <div class="col-md-6 pr-4 text-right">
        <label>
            @this.Model.SearchLabel
        </label>
        <input class="browser-default custom-input" style="width:auto;" @onchange="(async e =>
                                                                                   {
                                                                                       this.Model.SearchValue = (string)e.Value;
                                                                                       this.Model.PageIndex = 0;
                                                                                       await this.RefreshAsync();
                                                                                   })" />
    </div>
</div>

<div class="row">
    <div class="col-md-12" style="max-width:100%;overflow:auto;">
        <table id="@("dmuka3-table-" + this.tableId)" class="table @this.Class" @attributes="this.Attributes" data-unique-key="@this.Model.UniqueKey" style="margin-bottom:0px;">
            <thead>
                <tr>
                    @foreach (var column in this.Model.Columns)
                    {
                        <th @onclick="@(async e => { await clickColumn(column); })">
                            @column.Description @(column.SortType == Dmuka3TableModel.SortType.Asc ? "▲" : column.SortType == Dmuka3TableModel.SortType.Desc ? "▼" : "")
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
            </tbody>
            <tfoot>
            </tfoot>
        </table>
    </div>
</div>

<div class="row">
    <div class="col-md-3 text-left text-nowrap pl-4 mb-sm-2">
        <b>@(this.Model.PageIndex * this.Model.RowCount + 1) - @((this.Model.PageIndex + 1) * this.Model.RowCount)</b> / @(this.Model.TotalRowCount)
    </div>
    <div class="col-lg-5 col-md-9 text-right pr-4">
        @if (this.Model.PreviousPageEnable)
        {
            <button class="btn btn-primary" @onclick="(async e => { this.Model.PageIndex--; await this.RefreshAsync(); })">&#8249;</button>
        }

        @if (this.Model.GoFirstPageEnable)
        {
            <button class="btn btn-info" @onclick="(async e => { this.Model.PageIndex = 0; await this.RefreshAsync(); })">1</button>
        }

        @for (int i = this.Model.PageStart; i <= this.Model.PageEnd; i++)
        {
            var cloneI = i;
            if (cloneI < 0 || cloneI > this.Model.MaxPageIndex)
                continue;

            if (cloneI == this.Model.PageIndex)
            {
                <button class="btn btn-primary" @onclick="(async e => { this.Model.PageIndex = cloneI; await this.RefreshAsync(); })">@(cloneI + 1)</button>
            }
            else
            {
                <button class="btn btn-secondary" @onclick="(async e => { this.Model.PageIndex = cloneI; await this.RefreshAsync(); })">@(cloneI + 1)</button>
            }
        }

        @if (this.Model.GoLastPageEnable)
        {
            <button class="btn btn-info" @onclick="(async e => { this.Model.PageIndex = this.Model.MaxPageIndex; await this.RefreshAsync(); })">@(this.Model.MaxPageIndex + 1)</button>
        }

        @if (this.Model.NextPageEnable)
        {
            <button class="btn btn-primary" @onclick="(async e => { this.Model.PageIndex++; await this.RefreshAsync(); })">&#8250;</button>
        }
    </div>
</div>

<table style="display:none">
    <tbody id="@("dmuka3-table-clone-" + this.tableId)">
        @ChildContent
    </tbody>
</table>

@code {
    #region Variables
    #region Parameters
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public Dmuka3TableModel Model { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public Dictionary<string, object> Attributes { get; set; }
    #endregion

    private static ulong stableId = 0;
    private ulong tableId = 0;
    private static ConcurrentDictionary<ulong, Dmuka3Table> instances = new ConcurrentDictionary<ulong, Dmuka3Table>();
    #endregion

    #region Methods
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.tableId = stableId++;
            instances.AddOrUpdate(this.tableId, this, (id, val) =>
            {
                return this;
            });

            this.Model.Table = this;

            await JSRuntime.InvokeAsync<bool>("Dmuka3Table.Load", new object[] { this.tableId });

            await this.RefreshAsync();
        }
    }

    public void Dispose()
    {
        instances.TryRemove(this.tableId, out _);
    }

    [JSInvokable("Dmuka3Table.JSEvent")]
    public static async Task JSEvent(ulong tableId, string type, string name, string id, string json)
    {
        var instance = instances[tableId];
        switch (type)
        {
            case "dmuka3-table-dom-events":
                {
                    Func<Dmuka3TableModel, string, string, Task> actionAsync;
                    Action<Dmuka3TableModel, string, string> action;
                    if (instance.Model.ColumnEvents != null && instance.Model.ColumnEvents.TryGetValue(name, out action))
                    {
                        action(instance.Model, id, json);

                        Dmuka3Helper.StateHasChanged(instance.Model.Table);
                        Dmuka3Helper.StateHasChanged(instance.Model.Parent);
                    }
                    else if (instance.Model.ColumnEventsAsync != null && instance.Model.ColumnEventsAsync.TryGetValue(name, out actionAsync))
                    {
                        await actionAsync(instance.Model, id, json);
                        Dmuka3Helper.StateHasChanged(instance.Model.Table);
                        Dmuka3Helper.StateHasChanged(instance.Model.Parent);
                    }
                }
                break;
            default:
                break;
        }
    }

    public async Task RefreshAsync()
    {
        var result = await this.Model.OnRefreshAsync(this.Model);

        this.Model.TotalRowCount = result.totalRowCount;

        var rows = new List<Dictionary<string, string>>();

        foreach (var item in result.rows)
        {
            var type = item.GetType();
            var props = type.GetProperties();

            Dictionary<string, string> row = new Dictionary<string, string>();
            foreach (var prop in props)
                row.Add(prop.Name, (prop.GetValue(item) ?? "").ToString());

            rows.Add(row);
        }

        await JSRuntime.InvokeAsync<bool>("Dmuka3Table.Fill", new object[] { this.tableId, rows });

        this.StateHasChanged();
    }

    public void Refresh()
    {
        this.RefreshAsync().RunSynchronously();
    }

    private async Task clickColumn(Dmuka3TableModel.Column column)
    {
        if (column.Sortable == false)
            return;

        if (column.SortType == Dmuka3TableModel.SortType.None)
            column.SortType = Dmuka3TableModel.SortType.Asc;
        else if (column.SortType == Dmuka3TableModel.SortType.Asc)
            column.SortType = Dmuka3TableModel.SortType.Desc;
        else if (column.SortType == Dmuka3TableModel.SortType.Desc)
            column.SortType = Dmuka3TableModel.SortType.None;

        await this.RefreshAsync();
    }
    #endregion
}